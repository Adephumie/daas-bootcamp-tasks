apiVersion: v1
kind: Secret
metadata:
  name: nginx-tls-secret
  namespace: daas
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURqekNDQW5jQ0ZHcFljZXJYQ2MwbG96UXVBUDYvU1V0dmpySW9NQTBHQ1NxR1NJYjNEUUVCQ3dVQU1JR0QKTVFzd0NRWURWUVFHRXdKUVRERVBNQTBHQTFVRUNBd0dWMkZ5YzJGM01ROHdEUVlEVlFRSERBWlhZWEp6WVhjeApFREFPQmdOVkJBb01CMlJoWVhNdWJtY3hEVEFMQmdOVkJBc01CR1JoWVhNeEVEQU9CZ05WQkFNTUIyUmhZWE11CmJtY3hIekFkQmdrcWhraUc5dzBCQ1FFV0VHNTFjblZrWldWdVFHUmhZWE11Ym1jd0hoY05Nak14TURFME1URXcKTlRFMFdoY05NalF4TURFek1URXdOVEUwV2pDQmd6RUxNQWtHQTFVRUJoTUNVRXd4RHpBTkJnTlZCQWdNQmxkaApjbk5oZHpFUE1BMEdBMVVFQnd3R1YyRnljMkYzTVJBd0RnWURWUVFLREFka1lXRnpMbTVuTVEwd0N3WURWUVFMCkRBUmtZV0Z6TVJBd0RnWURWUVFEREFka1lXRnpMbTVuTVI4d0hRWUpLb1pJaHZjTkFRa0JGaEJ1ZFhKMVpHVmwKYmtCa1lXRnpMbTVuTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1Rk5nR25YeAplTnY3ejV2SEo0ZUM1TER4cGtldExoZi9QR2VidTJjeEVGTGNJZG5EKzAxaTdXM0hRZkRTUG5kSHNOSjhDYUM4CkhXYWQ2OG5xNGxKTWlMcGFOUlZxMEV4Q2RkQTVlb0J6d3ZIVlZ2STJmTG56NmpUSFpFUzFhTjhSanJnTVYyNnYKMGF1aWZXTTQ4amJYYmJ5ZTc5R0hEaDFBeEYwdHRsQ3JRYVd5dzlkOTExbFRLaDVEdjk1NzZLcCtpNFNDeWx3NQpIbC9Ud0RtcW1HN3U2WW9aL21tUlJHQUQxT3h2bG5yUXFEMzdwTnFRS2g2ZnhoSTdnRzBtS243V0lTamREZ1BECmZYYVJ1TnJTQlVnbGpERngzTDQ3b0hzSTRtM1IwdzExV2pHWkgweTA2Uml3cThtcGowQjE1dTd4K3FQaXZrdXUKWCtPcy9mSE1DYW8wclFJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNqSGNMdHk0Tk1ZcTVRRXNsKwp3N2plZFlkbEdmRmM3OVByRTB5SGVjWktQdWkrancwWDZlVCswancyeE9NSTVTNVljV2UrT09McVlMa09OaVA5CnU1cmhVVHB3QnFLeGQ3dS8vSjRZV3daMGJBdG9ZT1RhaDFQdkhRWkRVbW81VjA1RFJYaWs4cmZqYSs5VU1rMUgKNHh3THpQQlJrd0lLakMxOHBWZm5aM09TdXZGUFhLaWljRmpBUjM0NFppaFhuTEpuNkQrNU5idVcxclhTckVZNwp5Um14bnBFdldQdng1S3VJWWJiR1ZaVURKSzdWdjVZVlRwa2Y3Y29sQ3BRS1phWmdoNGpEWHhoaU54cFpKalFWCk9DWDZJQWlIdmlyWnk0dDI3TWdYUXRJRktSajh3TVlOTTFTQ0tnZHNYRE9tYlRiaW0xYjZxQXZybktGOVovK3kKYTY0QgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzRVMkFhZGZGNDIvdlAKbThjbmg0TGtzUEdtUjYwdUYvODhaNXU3WnpFUVV0d2gyY1A3VFdMdGJjZEI4TkkrZDBldzBud0pvTHdkWnAzcgp5ZXJpVWt5SXVsbzFGV3JRVEVKMTBEbDZnSFBDOGRWVzhqWjh1ZlBxTk1ka1JMVm8zeEdPdUF4WGJxL1JxNko5Cll6anlOdGR0dko3djBZY09IVURFWFMyMlVLdEJwYkxEMTMzWFdWTXFIa08vM252b3FuNkxoSUxLWERrZVg5UEEKT2FxWWJ1N3BpaG4rYVpGRVlBUFU3RytXZXRDb1BmdWsycEFxSHAvR0VqdUFiU1lxZnRZaEtOME9BOE45ZHBHNAoydElGU0NXTU1YSGN2anVnZXdqaWJkSFREWFZhTVprZlRMVHBHTENyeWFtUFFIWG03dkg2bytLK1M2NWY0Nno5Cjhjd0pxalN0QWdNQkFBRUNnZ0VBVk1VallZZjBjWnphQmZTaWRxOS9weVVwUFV1aGZaMVRxTGdOaXZZK1BqK2QKTllRcytabnhjVGdYZDJBRmtPelNiNk9kbjkvb0k2MVoyMktWUDFpU0VoK0I5UC9RaTlOR2pXQWh6eERjTEQrRAoyZVN5NGxHeXQzZG1hOXFkZzRselRhdWZJV2FxUFVjdUIzUm1jQjZBbk5zdVRTU1RkQTVJQndiRFN5RjJZVTNIClA4Smw5dnNoMm5NWkl0QWwyQ2lpM2ttU0VaTDdTb3ZDa0RpdXpmY2NXODBNb2NRZS82MGMvSnBXUCsvRWd2SU8KNndaYS9ML3VhOGk2a1BBdjJoYUdLS3cxYjBzd0w4K3NyOW1RYjVza0RuRThZQVpzVWs2R0dsUlIwY1pzZy83MQpONDJTTEFVeE5veDBISDJpellpOEY2a1FkRThTeHc2WGJrejFXWXJha1FLQmdRRGM1ZGxJNXUrMFk4aUhqbnJICk5xZVJXQ1NwZFFTLzFtZlBUWHpLbzBtaC9QM0pWczV4ZmgyT2s4WmZtWGo5KzJEbG9TczY4SDJVT3pIMWFZd0oKYzlnOWV2RUdZWC9ja215MXI5Y2hBQU5rd3JHdVZ0UXlGTWJmcU5HTUdsVzRNUUxMcEgxV3RHWU94RzdrMm5idgpHc2RxR21Lc0pOeU5XWk9EZHpEaHNGdk9id0tCZ1FEVm5jUkQ0RlZMMURCRHM3MWt5TGd3dDd5SGRoNVNJUk5rClFkcS9ONmJ0czdKQzN2cDhIcUNIVUlMU3g4a1V6UlYzNHZUVUJzL2VqL0lPZmhKRVY3MHYrdFJHU1FnaTVHRngKT1BlNjNRTVZLc0lHVG91bkF6eWlYek12NUZiYmV0UWx5dmVDOC9zeExYYmdmVk5Wa3pkemZONWhNU3RrRzFUMwpLdzFsU0VoOG93S0JnRnNRL3ZVSkQ4VWtaZVZNbmQxRzhPb0Fsb3l0eTFsekFMVDcwdmlQUEtubGJKTDJrSUZGClp0WUNvZ09EZDlmdExGTStrRjNxQ3p0eTgvT2lvYks3NldmZktVSmlLNTQ1VjB2SHhENjhqS21iZ2pqSFh3K08KZFRaN21IZlQyNGJsM2FzcWt1bU4wWTFBK2g2cTJlRlUvdVVGSDZ5c1BhaWdSeW9wbHlOVDIyVk5Bb0dBTDFNSApZeDQwNTFxMzRwZlVVcHFoSzdIWTQ0M0lnOXR1QjEwTGtDZE5KUVlWYlBrbk53NDE5Q1JqQnoxWmovRXJXMmI5ClpHZXA3NTJtTzQyMGtFMTd6VUJkZk1DN083ZXEyc0dMS0d2RVBoRTk4TlcvM0owNzlxRHVueUtRRjRtcnJEKzkKKzlYL2hWS1VMb0cxVDVVUXlOWVdFaVFwZjhFS1hzTzc4UDlGaDg4Q2dZRUFvNExkK0czeFFnWlU1SVZ1aHEwSgp2S2J0UGdHSHJyc0YrWlZNdzNCWXg1a1lldXExVC9HZTVCZHpEaVlZQnExc0lLemh3WmlhL1JpTUNCRGdGa2NjCmlxUWh1QXg5U0IwRm4rV0NUMER1NzJzc1R0elo0bEZlcm1qL01FMUl6S3ZWL0JMQWRLMGNyVFZtRUhlTHVIVk4KK3R5dkFmUTh1U2lnNHFzU3BvaTNqeFE9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K


# Note: The certificate and private key data must be encoded in base64 format.
# To generate a self-signed certificate, run the following commands:
# Generate a private key
# openssl genrsa -out tls.key 2048

# Generate a certificate signing request (CSR)
# openssl req -new -key tls.key -out tls.csr

# Generate a self-signed certificate valid for 365 days
# openssl x509 -req -days 365 -in tls.csr -signkey tls.key -out tls.crt

# Encode the generated files to base64 format
# cat tls.crt | base64
# cat tls.key | base64
